class Pessoa(object):
    total_pessoas = 0  # Atributo de classe para rastrear o total de pessoas

    # Método de inicialização da classe Pessoa
    def __init__(self, nome="", dependente=0):
        self.nome = nome
        self.dependente = dependente
        Pessoa.total_pessoas += 1  # Incrementa o contador de pessoas ao criar uma nova instância

    # Métodos para obter e definir o nome da pessoa
    def get_nome(self):
        return self.nome

    def set_nome(self, n_nome):
        self.nome = n_nome

    # Métodos para obter e definir o número de dependentes da pessoa
    def get_dependente(self):
        return self.dependente

    def set_dependente(self, n_dependente):
        self.dependente = n_dependente


# Classe Professor, que herda da classe Pessoa
class Professor(Pessoa):
    # Método de inicialização da classe Professor
    def __init__(self, nome="", dependente=0, qtd_turma=1, valor=100):
        super().__init__(nome, dependente)  # Chama o método de inicialização da classe pai
        self.qtd_turma = qtd_turma  # Número de turmas que o professor leciona
        self.valor = valor  # Valor pago por turma

    # Métodos para obter e definir a quantidade de turmas
    def get_qtd_turma(self):
        return self.qtd_turma

    def set_qtd_turma(self, n_qtd_turma):
        if n_qtd_turma < 0:
            print("Número de turmas deve ser maior que 0 (valor não será alterado)")
        else:
            self.qtd_turma = n_qtd_turma

    # Métodos para obter e definir o valor pago por turma
    def get_valor(self):
        return self.valor

    def set_valor(self, n_valor):
        self.valor = n_valor

    # Método para calcular o rendimento total do professor
    def rendimento(self):
        return self.valor * self.qtd_turma

    # Método para mostrar os dados do professor
    def mostrar_dados(self):
        print(f"Nome: {self.get_nome()}")
        print(f"Dependente: {self.get_dependente()}")
        print(f"Qtd turma: {self.get_qtd_turma()}")
        print(f"Valor por turma:", self.get_valor())
        print(f"Rendimento: {self.rendimento()}")
        print(f"Salário total: {self.rendimento() + (self.get_dependente()*100)}")


# Classe Funcionário, que herda da classe Pessoa
class Funcionario(Pessoa):  # Corrigido "Funcionário" para "Funcionario" (não é permitido acentuação em nomes de classes)
    # Método de inicialização da classe Funcionario
    def __init__(self, nome="", dependente=0, salario=1000):
        super().__init__(nome, dependente)  # Chama o método de inicialização da classe pai
        self.salario = salario  # Salário base do funcionário

    # Método para obter o salário do funcionário
    def get_salario(self):
        return self.salario

    # Método para definir o salário do funcionário
    def set_salario(self, n_salario):
        if n_salario < 1000:
            print("Salario mínimo é 1000 reais, valor não pode ser menor, salário não alterado")
        else:
            self.salario = n_salario

    # Método para calcular o salário total do funcionário
    def salario_total(self):
        return self.salario + 100 * self.dependente

    # Método para calcular o valor do vale alimentação do funcionário
    def vale_aliment(self):
        return self.dependente * 400

    # Método para mostrar os dados do funcionário
    def mostrar_dados(self):
        print(f"Nome: {self.get_nome()}")
        print(f"Dependente: {self.get_dependente()}")
        print(f"Salário: {self.get_salario()}")
        print(f"Salário total:", self.salario_total())
        print(f"Vale_alimentação: {self.vale_aliment()}")


# O bloco de código abaixo é executado apenas se o script for executado diretamente
if __name__ == "__main__":
    # Criação de instâncias e demonstração do funcionamento das classes
    Pe1 = Pessoa("Giovanni")
    print(Pe1.get_nome())
    print(Pe1.get_dependente())

    Pr1 = Professor("Michel", 2, 8, 1000)
    print(Pr1.get_nome())
    Pr1.set_nome("Leandro")
    print(Pr1.get_nome())
    print(Pr1.get_dependente())
    print(Pr1.get_qtd_turma())
    print(Pr1.get_valor())

    Pr2 = Professor("Gisele", 100)
    print(Pr2.get_nome())
    print(Pr2.get_dependente())
    print(Pr2.get_qtd_turma())
    print(Pr2.get_valor())

    Pr3 = Professor()
    print(Pr3.get_nome())
    print(Pr3.get_dependente())
    print(Pr3.get_qtd_turma())
    print(Pr3.get_valor())

    Pr4 = Professor("Osvaldo", qtd_turma=10)
    print(Pr4.get_nome())
    print(Pr4.get_dependente())
    print(Pr4.get_qtd_turma())
    print(Pr4.get_valor())

    Pr1.set_qtd_turma(-1)
    print(Pr1.get_qtd_turma())
    print(Pr1.rendimento())

    Fun1 = Funcionario("Julieta", 2, 1500)
    Fun2 = Funcionario("Eliene", 4)
    Fun3 = Funcionario("Romeu")
    print(Fun1.get_nome())
    print(Fun1.get_dependente())
    print(Fun1.get_salario())
    print(Fun2.get_nome())
    print(Fun2.get_dependente())
    print(Fun2.get_salario())
    print(Fun3.get_nome())
    print(Fun3.get_dependente())
    print(Fun3.get_salario())

    Fun1.set_salario(10)
    print(Fun1.get_salario())
    print(Fun1.salario_total())

    Fun1.mostrar_dados()
    Pr1.mostrar_dados()

    print("Quantidade de usuários cadastrados no sistema: ", Pessoa.total_pessoas)

